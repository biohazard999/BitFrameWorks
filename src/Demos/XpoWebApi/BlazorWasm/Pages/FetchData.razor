@page "/fetchdata"
@inject HttpClient Http

@using DevExpress.Xpo
@using XpoDemoOrm
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick="() => Refresh()">Refresh</button>
<button @onclick="CreateNew">Create New</button>

@if (Customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="cursor: pointer;" @onclick="() => Refresh(nameof(Customer.Code))">Code</th>
                <th style="cursor: pointer;" @onclick="() => Refresh(nameof(Customer.Name))">Name</th>
                <th style="cursor: pointer;" @onclick="() => Refresh(nameof(Customer.Active))">Active</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.Code</td>
                    <td>@customer.Name</td>
                    <td>@customer.Active</td>
                </tr>
}
        </tbody>
    </table>
}

@code {
    private IEnumerable<Customer> Customers;
    private XpoInitializer xpoInitializer;
    protected override async Task OnInitializedAsync()
    {
        if (xpoInitializer == null)
        {
            //https://localhost:44359/api/XpoWebApi

            var XpoWebApiAspNetCore = XpoWebApiProvider.GetConnectionString("https://localhost:44389", "/XpoWebApi", string.Empty, "001", "Http");
            //var XpoWebApiAspNet = XpoWebApiProvider.GetConnectionString("https://localhost:44359", "/api/XpoWebApi", string.Empty, "001", "Http");


            //XpoInitializer xpoInitializer = new XpoInitializer(XpoWebApiAspNet, typeof(Invoice), typeof(Customer));
            xpoInitializer = new XpoInitializer(XpoWebApiAspNetCore, typeof(Invoice), typeof(Customer));

            await xpoInitializer.InitSchemaAsync();
            await Refresh();
        }
    }

    async Task Refresh(string? orderBy = null)
    {
        if (xpoInitializer == null) return;
        using (var uow = xpoInitializer.CreateUnitOfWork())
        {
            if (orderBy == null)
            {
                orderBy = nameof(Customer.Name);
            }
            switch (orderBy)
            {
                case nameof(Customer.Name):
                    Customers = await uow.Query<Customer>().OrderBy(m => m.Name).ToListAsync();
                    break;
                case nameof(Customer.Code):
                    Customers = await uow.Query<Customer>().OrderBy(m => m.Code).ToListAsync();
                    break;
                case nameof(Customer.Active):
                    Customers = await uow.Query<Customer>().OrderBy(m => m.Active).ToListAsync();
                    break;
                default:
                    break;
            }


        }
    }

    async Task CreateNew()
    {
        if (xpoInitializer == null) return;
        using (var UoW = xpoInitializer.CreateUnitOfWork())
        {
            var faker = new Bogus.Faker<Customer>().CustomInstantiator(c => new Customer(UoW))
                        .RuleFor(p => p.Code, f => f.Random.Guid())
                        .RuleFor(p => p.Name, f => f.Name.FullName())
                        .RuleFor(p => p.Active, p => p.Random.Bool());

            var Customers = faker.Generate(100);
            if (UoW.InTransaction)
            {
                await UoW.CommitChangesAsync();
            }
            await Refresh();
        }
    }
}
